plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
}

// Read language settings from gradle.properties
def languages = project.findProperty('languages')?.split(',')?.collect { it.trim() } ?: ['DE']

repositories {
    mavenCentral()
}

// Configure common AsciiDoc attributes

ext {
    asciidocAttributes = [
        'source-highlighter': 'coderay',
        'toc': 'left',
        'toclevels': '3',
        'doctype': 'book'
    ]
}

// Create HTML and PDF tasks for each configured language
languages.each { language ->
    // Define HTML conversion task for this language
    tasks.register("asciidoctorHtml${language}", org.asciidoctor.gradle.jvm.AsciidoctorTask) {
        // Configure source - using language-specific directory
        sourceDir file("${language}/asciidoc")
        sources {
            include 'arc42-template.adoc'
        }
        
        // Configure output
        outputDir file("build/${language}/html")
        
        // Set base directory to make includes work
        baseDirFollowsSourceDir()
        
        // Set attributes
        attributes asciidocAttributes + [
            'imagesdir': "${projectDir}/images"
        ]
        
        // Log completion
        doLast {
            println "HTML conversion completed for language: ${language}"
            println "Output directory: ${outputDir}"
        }
    }
    
    // Define PDF conversion task for this language
    tasks.register("asciidoctorPdf${language}", org.asciidoctor.gradle.jvm.pdf.AsciidoctorPdfTask) {
        // Configure source - using language-specific directory
        sourceDir file("${language}/asciidoc")
        sources {
            include 'arc42-template.adoc'
        }
        
        // Configure output
        outputDir file("build/${language}/pdf")
        
        // Set base directory to make includes work
        baseDirFollowsSourceDir()
        
        // Set attributes
        attributes asciidocAttributes + [
            'imagesdir': "${projectDir}/images",
            'pdf-page-size': 'A4'
        ]
        
        // Log completion
        doLast {
            println "PDF conversion completed for language: ${language}"
            println "Output directory: ${outputDir}"
        }
    }
}

// Create aggregate tasks for all languages
tasks.register('asciidoctorHtmlAll') {
    description 'Builds HTML for all configured languages'
    group 'Documentation'
    
    languages.each { language ->
        dependsOn tasks.named("asciidoctorHtml${language}")
    }
}

tasks.register('asciidoctorPdfAll') {
    description 'Builds PDF for all configured languages'
    group 'Documentation'
    
    languages.each { language ->
        dependsOn tasks.named("asciidoctorPdf${language}")
    }
}

tasks.register('asciidoctorAll') {
    description 'Builds HTML and PDF for all configured languages'
    group 'Documentation'
    
    dependsOn tasks.named('asciidoctorHtmlAll')
    dependsOn tasks.named('asciidoctorPdfAll')
}

// Clean task to remove all build artifacts
tasks.named('clean') {
    description 'Deletes the build directory'
    group 'Build'
    
    doLast {
        delete 'build'
        println "Build directory cleaned"
    }
}

// Default task to generate documentation
defaultTasks 'asciidoctorAll'

// Print configuration info at start of build
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':asciidoctorAll') || 
        taskGraph.hasTask(':asciidoctorHtmlAll') || 
        taskGraph.hasTask(':asciidoctorPdfAll')) {
        println "Building arc42 documentation for languages: ${languages.join(', ')}"
        println "Using language directories: ${languages.collect { "${it}/asciidoc" }.join(', ')}"
        println "Main file: arc42-template.adoc"
    }
}